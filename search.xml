<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>测试一下</title>
    <url>/2019/11/15/%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B/</url>
    <content><![CDATA[<h4 id="哈哈哈哈哈哈哈哈"><a href="#哈哈哈哈哈哈哈哈" class="headerlink" title="哈哈哈哈哈哈哈哈"></a>哈哈哈哈哈哈哈哈</h4><h4 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h4><h4 id="测试一下-1"><a href="#测试一下-1" class="headerlink" title="测试一下"></a>测试一下</h4><h4 id="测试一下-2"><a href="#测试一下-2" class="headerlink" title="测试一下"></a>测试一下</h4><h4 id="测试一下-3"><a href="#测试一下-3" class="headerlink" title="测试一下"></a>测试一下</h4><h4 id="测试一下-4"><a href="#测试一下-4" class="headerlink" title="测试一下"></a>测试一下</h4><h4 id="测试一下测试一下"><a href="#测试一下测试一下" class="headerlink" title="测试一下测试一下"></a>测试一下测试一下</h4><h4 id="测试一下-5"><a href="#测试一下-5" class="headerlink" title="测试一下"></a>测试一下</h4><h4 id="测试一下-6"><a href="#测试一下-6" class="headerlink" title="测试一下"></a>测试一下</h4><h4 id="测试一下-7"><a href="#测试一下-7" class="headerlink" title="测试一下"></a>测试一下</h4><h4 id="测试一下-8"><a href="#测试一下-8" class="headerlink" title="测试一下"></a>测试一下</h4><h4 id="测试一下-9"><a href="#测试一下-9" class="headerlink" title="测试一下"></a>测试一下</h4><h4 id="测试一下测试一下-1"><a href="#测试一下测试一下-1" class="headerlink" title="测试一下测试一下"></a>测试一下测试一下</h4><h4 id="测试一下-10"><a href="#测试一下-10" class="headerlink" title="测试一下"></a>测试一下</h4>]]></content>
      <categories>
        <category>测试一下</category>
      </categories>
      <tags>
        <tag>没有标签</tag>
      </tags>
  </entry>
  <entry>
    <title>NYOJ-1239</title>
    <url>/2019/05/04/NYOJ-1239/</url>
    <content><![CDATA[<h2 id="第八届河南省acm————引水工程-NYOJ-1239"><a href="#第八届河南省acm————引水工程-NYOJ-1239" class="headerlink" title="第八届河南省acm————引水工程 NYOJ-1239"></a>第八届河南省acm————引水工程 <a href="http://nyoj.top/problem/1239" target="_blank" rel="noopener">NYOJ-1239</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>南水北调工程是优化水资源配置、促进区域协调发展的基础性工程，是新中国成立以来投资额最大、涉及面最广的战略性工程，事关中华民族长远发展。“南水北调工程”，旨在缓解中国华北和西北地区水资源短缺的国家战略性工程。就是把中国长江流域丰盈的水资源抽调一部分送到华北和西北地区。我国南涝北旱，南水北调工程通过跨流域的水资源合理配置，促进南北方经济、社会与人口、资源、环境的协调发展。</p>
<p>整个工程分东线、中线、西线三条调水线。东线工程位于东部，因地势低需抽水北送至华北地区。中线工程从汉水与其最大支流丹江交汇处的丹江口水库引水，自流供水给黄淮海平原大部分地区，20多座大中城市；西线工程在青藏高原上，由长江上游向黄河上游补水。</p>
<p>现在有N个区域需要建设水资源工程，它们可以自建水库解决缺水问题，也可以从已有水源的地区建立管道引水过来。当然，这些建设都需要大量投资。</p>
<p>你能不能给出一个优化水资源配置方案，在保证每个区域都能用上水的前提下，使得整个引水工程费用最低。</p>
</blockquote>
<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><blockquote>
<p>第一行：     K           表示有多少组测试数据。<br>接下来对每组测试数据：<br>第1行:      N               表示有N个区域（ 1&lt;=N&lt;=300 ）<br>第2行： W1  W2  …. WN  Wi表示第i个区域自建水库需要的费用<br>再有N行：   Pi1  Pi2   ….  Pin   Pij表示建立第i个区域与第j个区域引水管道的费用</p>
</blockquote>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><blockquote>
<p>  对于每组测试数据，输出占一行，即建立整个引水工程的最小费用。</p>
</blockquote>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><blockquote>
<p>1<br>5<br>5 4 4 3 6<br>0 2 2 2 2<br>2 0 3 3 3<br>2 3 0 4 5<br>2 3 4 0 1<br>2 3 5 1 0</p>
</blockquote>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><blockquote>
<p>10</p>
</blockquote>
<p>在图中加入一个节点，此节点到其他水库的权值为自建水库所需要的费用，在图中求最小生成树，最小生成树中所有边的和即为整个工程的最小费用</p>
<p>Kruskal算法求最小生成树<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">300</span> + <span class="number">5</span>],n,cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,value;</span><br><span class="line">&#125;s[<span class="number">90000</span> + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.value &lt; b.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> value)</span><span class="comment">//添加边到集合中</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[cnt].x = i;</span><br><span class="line">    s[cnt].y = j;</span><br><span class="line">    s[cnt++].value = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//查找集合的根</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == f[x])</span><br><span class="line">    	<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x] = find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span><span class="comment">//合并集合</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=find(i);</span><br><span class="line">    <span class="keyword">int</span> y=find(j);</span><br><span class="line">    <span class="keyword">if</span>(x!=y)</span><br><span class="line">    &#123;</span><br><span class="line">           f[x]=y;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t,temp;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span>(t--)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//记录整个引水工程的费用总和</span></span><br><span class="line">        cnt = <span class="number">0</span>;<span class="comment">//记录图中边的数量</span></span><br><span class="line">	    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)<span class="comment">//初始化并查集</span></span><br><span class="line">        	f[i] = i;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	    &#123;</span><br><span class="line">	        <span class="built_in">cin</span> &gt;&gt; temp;<span class="comment">//读入自建水库所需费用</span></span><br><span class="line">	        addedge(<span class="number">0</span>, i, temp);<span class="comment">//将其对应的边加入图中</span></span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	    &#123;</span><br><span class="line">	        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">	        &#123;</span><br><span class="line">	            <span class="built_in">cin</span> &gt;&gt; temp;<span class="comment">//读入引水所需的费用</span></span><br><span class="line">	            addedge(i, j, temp);<span class="comment">//把引水对应的边加入图中</span></span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	    sort(s, s + cnt, cmp);<span class="comment">//对所有边的权值排序</span></span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)</span><br><span class="line">	    &#123;</span><br><span class="line">	        <span class="keyword">if</span>(merge(s[i].x,s[i].y))</span><br><span class="line">	            sum += s[i].value;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo + Github搭建个人图床工具</title>
    <url>/2019/05/01/aaa/</url>
    <content><![CDATA[<h2 id="PicGo-Github搭建个人图床工具"><a href="#PicGo-Github搭建个人图床工具" class="headerlink" title="PicGo + Github搭建个人图床工具"></a>PicGo + Github搭建个人图床工具</h2><p>我们平时写博客的时候会经常引用一些图片，而Markdown和Word不一样，Word是把图片镶嵌在文档中的，而Markdown是以链接的方式来读取图片的，可以是本地图片也可以是网络上的图片，如果把图片放在本地，把文档发给别人的同时还得把图片发给别人，不仅如此，还得保证图片和文档的相随路径不发生改变。显然，这样操作很麻烦，更好的方法是把图片存在一些网站上，以网络链接的方式读取图片，以这样的方式读取图片是需要连网的，都9102年了，网络估计不成什么问题。</p>
<h2 id="创建Github图床"><a href="#创建Github图床" class="headerlink" title="创建Github图床"></a>创建Github图床</h2><p>在Github中创建任意名称的项目<br><br>进入Settings<br><br><img src="https://raw.githubusercontent.com/hujunkui/image-hosting/master/img/20190501234559.png" alt></p>
<p>进入Developer settings<br><br><img src="https://raw.githubusercontent.com/hujunkui/image-hosting/master/img/20190501234902.png" alt></p>
<p>进入Personal access tokens<br><br><img src="https://raw.githubusercontent.com/hujunkui/image-hosting/master/img/20190501234937.png" alt></p>
<p>进入<br><br><img src="https://raw.githubusercontent.com/hujunkui/image-hosting/master/img/20190501235058.png" alt></p>
<p>随便填写一个描述，然后勾上repo<br><br><img src="https://raw.githubusercontent.com/hujunkui/image-hosting/master/img/20190501235151.png" alt></p>
<p>点击最下面的Generate token<br><br><img src="https://raw.githubusercontent.com/hujunkui/image-hosting/master/img/20190501235301.png" alt></p>
<p>记住生成的token,只会显示一次，以后将不会出现，如果忘记了可以重新生成<br><br><img src="https://raw.githubusercontent.com/hujunkui/image-hosting/master/img/20190501235528.png" alt></p>
<h2 id="PicGo是什么？"><a href="#PicGo是什么？" class="headerlink" title="PicGo是什么？"></a>PicGo是什么？</h2><p>上面我们提到了，我们写博客插入图片通常是网络链接，那么以前我们都是怎么操作的呢?<br></p>
<ol>
<li>截一张图</li>
<li>打开xxx网站，登录，找到上传，上传图片</li>
<li>关闭上传窗口，找到地址，复制地址，再关闭xxx网站</li>
<li>粘贴到 Markdown 里</li>
</ol>
<p>每次插入一张图片都要进行如此繁琐的操作，那岂不是把大量的时间浪费在了这些没有意义的事情上了，这时，万能的程序员就写出了PicGO这个开源项目，把上面繁琐的步骤封装起来，以后插入图片只需要这样操作即可</p>
<ol>
<li>截一张图</li>
<li>按下快捷键</li>
<li>粘贴到 Markdown 里</li>
</ol>
<h2 id="安装PicGo"><a href="#安装PicGo" class="headerlink" title="安装PicGo"></a>安装PicGo</h2><p>下载<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo</a>并安装<br><br>选中图床设置中的Github图床<br></p>
<ul>
<li>仓库名为Github用户名/创建的图床仓库名</li>
<li>分支填master</li>
<li>填写之前获取的token</li>
<li>在图床仓库中存放的位置，填什么都行</li>
<li>自定义域名照着格式填写<a href="https://raw.githubusercontent.com/Github用户名/图床仓库名/master" target="_blank" rel="noopener">https://raw.githubusercontent.com/Github用户名/图床仓库名/master</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/hujunkui/image-hosting/master/img/20190501235656.png" alt></p>
<p>设置快捷键,这个看个人习惯了<br></p>
<p><img src="https://raw.githubusercontent.com/hujunkui/image-hosting/master/img/20190502000552.png" alt></p>
<p>上传方式</p>
<ul>
<li>拖拽上传</li>
<li>快捷键上传</li>
</ul>
<p><img src="https://raw.githubusercontent.com/hujunkui/image-hosting/master/img/20190502000842.png" alt></p>
<p><img src="https://raw.githubusercontent.com/hujunkui/image-hosting/master/img/20190502000858.png" alt></p>
<p>可以在相册中查看自己的上传记录<br><br><img src="https://raw.githubusercontent.com/hujunkui/image-hosting/master/img/20190502001035.png" alt></p>
]]></content>
      <categories>
        <category>实用教程</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo + Github 搭建免费个人博客（未完待续）</title>
    <url>/2019/05/01/hexos/</url>
    <content><![CDATA[<h1 id="Windows系统下搭建基于Hexo框架的博客网站（未完待续）"><a href="#Windows系统下搭建基于Hexo框架的博客网站（未完待续）" class="headerlink" title="Windows系统下搭建基于Hexo框架的博客网站（未完待续）"></a>Windows系统下搭建基于Hexo框架的博客网站（未完待续）</h1><h2 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h2><blockquote>
<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，<br>是搭建博客的首选框架。大家可以进入<a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>官网进行详细查看，因为Hexo的创建者是台湾人，对中文<br>的支持很友好，可以选择中文进行查看。</p>
</blockquote>
<h2 id="Hexo-搭建步骤"><a href="#Hexo-搭建步骤" class="headerlink" title="Hexo 搭建步骤"></a>Hexo 搭建步骤</h2><pre><code>1. 安装Git
2. 安装Node.js
3. 安装Hexo
...未完待续
</code></pre><h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h2><pre><code>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用
来管理你的hexo博客文章，上传到GitHub的工具。
</code></pre><p>到Git<a href="https://git-scm.com/" target="_blank" rel="noopener">官网</a>上下载Git并安装,安装好后在cmd窗口查看一下版本检测是否安装成功</p>
<p><code>git --version</code></p>
<p><img src="../../../../images/img/git.png" alt="git"></p>
<h2 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2. 安装Node.js"></a>2. 安装Node.js</h2><blockquote>
<p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具</p>
</blockquote>
<p>下载<a href="http://nodejs.cn/" target="_blank" rel="noopener">Node.js</a>并安装,安装好后在cmd窗口查看一下版本检测是否安装成功<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></p>
<p><img src="../../../../images/img/node.png" alt="node"></p>
<h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h2><pre><code>创建一个文件夹blog(名字随意)，选中文件夹右键Git Bash Here打开
</code></pre><h3 id="更换npm源"><a href="#更换npm源" class="headerlink" title="更换npm源"></a>更换npm源</h3><p><code>npm --registry https://registry.npm.taobao.org install express</code></p>
<p><img src="../../../../images/img/npm.png" alt="npm"></p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p><code>npm install -g hexo-cli</code></p>
<p><img src="../../../../images/img/npm1.png" alt="npm1"></p>
<p><code>hexo -v</code>检查版本</p>
<p><img src="../../../../images/img/hexo.png" alt></p>
<p><code>npm install</code>安装Hexo框架依赖库</p>
<p><code>hexo init</code>初始化Hexo</p>
<p>初始化完成后，会有一个默认主题以及一个hello-word的默认文章。所以我们可以先生成博客来看一下效果，运行命令：</p>
<p><code>hexo -generate</code> //可以简写为<code>hexo -g</code></p>
<p><code>hexo -server</code>//可以简写为<code>hexo -s</code></p>
<blockquote>
<p>在浏览器中输入<a href="localhost:4000" target="_blank" rel="noopener">localhost:4000</a>查看效果</p>
</blockquote>
<p><img src="../../../../images/img/111.png" alt></p>
<h2 id="4-更换主题"><a href="#4-更换主题" class="headerlink" title="4.更换主题"></a>4.更换主题</h2><pre><code>有许多优秀的主题，可以自行下载尝试，这里我用next主题作为例子，修改_config.yml配置文件，在文件中查
找theme并将其值修改为next
</code></pre><p>下载next主题</p>
<p><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></p>
<p>修改_config.yml配置文件中的theme的值为next</p>
<p><img src="../../../../images/img/theme.png" alt></p>
<p>执行命令看一下效果</p>
<p><code>hexo -generate</code></p>
<p><code>hexo -server</code></p>
<p><img src="../../../../images/img/2222.png" alt><br><!-- ### 更改默认语言
    修改_config.yml配置文件 --></p>
<h3 id="更改页面布局"><a href="#更改页面布局" class="headerlink" title="更改页面布局"></a>更改页面布局</h3><pre><code>修改themes文件夹下的_config.yml配置文件,用哪个就把哪个的注释打开即可，这里我选择了Gemini
</code></pre><p><img src="../../../../images/img/Schemes.png" alt></p>
<h3 id="开启头像功能"><a href="#开启头像功能" class="headerlink" title="开启头像功能"></a>开启头像功能</h3><pre><code>修改themes文件夹下的_config.yml配置文件,把注释打开即可，如果想更换修改下图片路径
</code></pre><p><img src="../../../../images/img/3333.png" alt></p>
<h3 id="开启菜单栏其他功能"><a href="#开启菜单栏其他功能" class="headerlink" title="开启菜单栏其他功能"></a>开启菜单栏其他功能</h3><pre><code>修改themes文件夹下的_config.yml配置文件,想要哪个功能，就把哪个注释打开
</code></pre><p><img src="../../../../images/img/4444.png" alt></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>如何使用VJudge平台</title>
    <url>/2019/04/30/1/</url>
    <content><![CDATA[<h2 id="如何使用VJudge平台刷题"><a href="#如何使用VJudge平台刷题" class="headerlink" title="如何使用VJudge平台刷题"></a>如何使用VJudge平台刷题</h2><h3 id="1-如何找到题"><a href="#1-如何找到题" class="headerlink" title="1.如何找到题"></a>1.如何找到题</h3><p>对于ACM刚入门的新手，建议先刷一刷HDU上著名的100道水题（2000 - 2099），熟悉一下竞赛的基本套路，首先在首<br>页点击Problem然后选择OJ源为HDU，然后再Prob中输入2，最后点击排序箭头进行排序。</p>
<p><img src="../../../../images/img/001.png" width="850"></p>
<h3 id="2-如何做题"><a href="#2-如何做题" class="headerlink" title="2.如何做题"></a>2.如何做题</h3><p>现在我就拿HDU2000这道题举例子，点击题目名称进入题目页面， 不要点击题号，点题号会进入题目的原网站。在本地<br>编写并调试好代码后点击左上角的Submit进入提交页面进行提交。<br><img src="../../../../images/img/002.png" width="850"></p>
<p>在language选项框中选择语言，然后在Solution框中拷贝上自己的代码，最后点右下角的Submit进行提交。</p>
<p><img src="../../../../images/img/003.png" width="850"></p>
<p>最后可以看到自己的提交状态<br><img src="../../../../images/img/004.png" width="850"></p>
<pre><code>下面是常见的OJ评判结果以及它们表示的意思：
Queuing : 提交太多了，OJ无法在第一时间给所有提交以评判结果，后面提交的程序将暂时处于排队状态等待OJ的评
判。不过这个过程一般不会很长。
Compiling : 您提交的代码正在被编译。
Running : 您的程序正在OJ上运行。
Judging : OJ正在检查您程序的输出是否正确。
Accepted (AC) : 您的程序是正确的，恭喜！
Wrong Answer (WA) : 输出结果错，这个一般认为是算法有问题。
Time Limit Exceeded (TLE) : 您的程序运行的时间已经超出了这个题目的时间限制。
Memory Limit Exceeded (MLE) : 您的程序运行的内存已经超出了这个题目的内存限制。
Output Limit Exceeded (OLE) : 您的程序输出内容太多，超过了这个题目的输出限制。
Compilation Error (CE) : 您的程序语法有问题，编译器无法编译。具体的出错信息可以点击链接察看。
Presentation Error (PE) : 虽然您的程序貌似输出了正确的结果，但是这个结果的格式有点问题。请检查程序的
输出是否多了或者少了空格（&apos; &apos;）、制表符（&apos;\t&apos;）或者换行符（&apos;\n&apos;）。
Runtime Error (RE) : 运行时错误，这个一般是程序在运行期间执行了非法的操作造成的。以下列出常见的错误类
型：
ACCESS_VIOLATION 您的程序想从一些非法的地址空间读取或向其中写入内容。一般例如指针、数组下标越界都会造
成这个错误的。
ARRAY_BOUNDS_EXCEEDED 您的程序试图访问一个超出硬件支持范围的数组单元。
FLOAT_DENORMAL_OPERAND 进行了一个非正常的浮点操作。一般是由于一个非正常的浮点数参与了浮点操作所引起的
，比如这个数的浮点格式不正确。
FLOAT_DIVIDE_BY_ZERO 浮点数除法出现除数为零的异常。
FLOAT_OVERFLOW 浮点溢出。要表示的数太大，超出了浮点数的表示范围。
FLOAT_UNDERFLOW 浮点下溢。要表示的数太小，超出了浮点数的表示范围。
INTEGER_DIVIDE_BY_ZERO 在进行整数除法的时候出现了除数为零的异常。
INTEGER_OVERFLOW 整数溢出。要表示的数值太大，超出了整数变量的范围。
STACK_OVERFLOW 栈溢出。一般是由于无限递归或者在函数里使用了太大的数组变量的原因。顾名思义，stack
overflow 就是是栈溢出了。在进行数值运算时，我们常常要和运算结果的溢出打交道。数值运算结果可能上溢
（overflow），也可能是下溢（underflow）。不过栈的溢出显然只可能是上溢，即栈空间被用完了。
要正确处理栈溢出采用以下办法：
（1）修正我们的程序，不要造成无穷递归或太深的递归。我们可以把某些递归代码非递归化，例如那个经典的
 qsort ，最好就用非递归的算法来实现，就比较皮实一点。
（2）修正我们的程序，不要定义过大的局部变量，特别是在定义大结构、大数组时要格外小心。有时我们可能会用
 _alloca() 这样的特殊函数直接在栈上分配空间，更要多加注意。可以定义成static
（3）利用编译器的特性，将进程允许的栈大小设置得大一些。例如可以采用 MSC 中的 /STACK 参数开关。
（4）对于那些还可能导致栈溢出的代码，采用 Microsoft 的结构化异常处理或标准的 C++ 异常处理机制，结合
 _resetstkoflw() 进行处理。当然了，要是不嫌麻烦，我们也可以自己探测所用栈的大小，动态地检测是否可能导
 致
栈溢出，以避免可能的异常。
...... 其他错误，包括C++标准库/STL运行时库错误等，这里不再举例。
</code></pre>]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>1</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM常见博弈论--巴什博弈</title>
    <url>/2019/04/29/2/</url>
    <content><![CDATA[<h2 id="巴什博弈（Bash-Game）"><a href="#巴什博弈（Bash-Game）" class="headerlink" title="巴什博弈（Bash Game）"></a>巴什博弈（Bash Game）</h2><pre><code>有n个石子，两个人从轮流中取出（1 ~ m）个；最后取光者胜。

巴什博奕是博弈论问题中基础的问题，它是最简单的一种情形对应一种状态的博弈。
</code></pre><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><pre><code>我们从最简单的情景开始分析
当石子有1 − m个时，毫无疑问，先手必胜
当石子有m + 1个时，先手无论拿几个，后手都可以拿干净，先手必败
当石子有m + 2 到 2m时，先手可以拿走几个，剩下m + 1个，先手必胜
我们不难发现，面临m + 1个石子的人一定失败。
这样的话两个人的最优策略一定是通过拿走石子，使得对方拿石子时还有m+1个
我们考虑往一般情况推广为通过拿走石子，使得对方拿石子时还有（m+1）的倍数个
设当前的石子数为n = k ∗ (m + 1) + r
先手会首先拿走r个，接下来假设后手拿走x个，先手会拿走m + 1 − x个，这样博弈下去后手最
终一定失败设当前的石子数为n = k ∗ (m + 1)
假设先手拿x个，后手一定会拿m + 1 − x个，这样下去先手一定失败
</code></pre><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">if</span>(n % (m + <span class="number">1</span>) !=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"first win"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"second win"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="例题1-HDU-1846"><a href="#例题1-HDU-1846" class="headerlink" title="例题1    HDU-1846"></a>例题1    <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1846" target="_blank" rel="noopener">HDU-1846</a></h3><pre><code>巴什博弈裸题
</code></pre><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span>(t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> n, m;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		<span class="keyword">if</span>(n % (m + <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"second"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"first"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="例题2-HDU-2149"><a href="#例题2-HDU-2149" class="headerlink" title="例题2    HDU-2149"></a>例题2    <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2149" target="_blank" rel="noopener">HDU-2149</a></h3><pre><code>巴什博弈 + 考虑下n &lt; m 的情况
</code></pre><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m, n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(m % (n + <span class="number">1</span>) == <span class="number">0</span>) <span class="comment">//先手必败状态</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"none"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(m &gt; n)</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; m % (n + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//把余数取走，是游戏处于必败状态</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i = m; i &lt;= n; i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">					<span class="keyword">if</span>(i != n)</span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="例题3-HDU-1847"><a href="#例题3-HDU-1847" class="headerlink" title="例题3 HDU-1847"></a>例题3 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1847" target="_blank" rel="noopener">HDU-1847</a></h3><pre><code>首先要寻找必败状态，n为3时先手必败。分析如下：
若是留给先手的是3，那么只能取1个或2个，所以再轮到后手取的话必赢。
若是给后手留下的是3的倍数，假设为3n(n=1,2,3,..)，那么无论先手取什么数，剩余的数一
定可以写成3m+1或者3m+2(m&lt;n)的形式，那么只要先手再取的时候留给后手的仍然是3的倍数的
话，就必胜了。所以说这道题判断一下n是否是3的倍数，如果是先手必败。
</code></pre><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Cici"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Kiki"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
  </entry>
  <entry>
    <title>ACM入门之多组数据输入输出</title>
    <url>/2019/04/28/ACM/</url>
    <content><![CDATA[<p> 不论是在ACM/ICPC这样类型的比赛中，还是在做项目中，对于输入输出的格式尤为重要，不可以想当然的按自己那一套走，我们需要根据题目要求进行操作，对于第一次接触这方面比赛的小白，最为常见的现象便是类似于下面这行代码<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入整数 a 和 b\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a和b的和为%d的"</span>，a + b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>倘若题目没有要求你，千万不要有多余的输出，虽然在测试的时候方便自己，但也麻烦在提交运行时注释掉，因为电脑可没有你的大脑那样灵活，他要对比的数据很死板，<strong>多一个空格少一个空格都不行</strong>，所以，在这一块的处理一定要 <strong>细心！细心！再细心！</strong> 下面我们来看下常见的输入输出格式有哪些</p>
<h4 id="1-单组数据输入输出"><a href="#1-单组数据输入输出" class="headerlink" title="1. 单组数据输入输出"></a>1. 单组数据输入输出</h4><p>题目要求输入一组整数a和b,然后输出a和b的和<br>C++<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>C<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-T组数据输入输出"><a href="#2-T组数据输入输出" class="headerlink" title="2. T组数据输入输出"></a>2. T组数据输入输出</h4><p>题目要求输入T组整数a和b，然后对于每组的输入，分别输出对应a和b的和。常见的有两种方法，分别是while循环和for循环。<br>while循环方式<br>C++<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>C<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>for循环方式</p>
<p>C++<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>C<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, a, b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-多组数据的输入输出（具体有几组不告诉你，而竞赛中最常见的就是这种方式）"><a href="#3-多组数据的输入输出（具体有几组不告诉你，而竞赛中最常见的就是这种方式）" class="headerlink" title="3. 多组数据的输入输出（具体有几组不告诉你，而竞赛中最常见的就是这种方式）"></a>3. 多组数据的输入输出（具体有几组不告诉你，而竞赛中最常见的就是这种方式）</h4><p>题目要求输入多组整数a和b，然后对于每组的输入，分别输出对应a和b的和。<br><br>不告诉你究竟有几组数组，该如何处理这种情况呢？首先说一下评测系统是如何判断你的程序是否正确的<br>实际上评测系统是把程序的标准输入输出数据都是放在文本文件里，你提交的程序会先经过编译，然后运行，从输入文件中<br>读取数据，然后把结果输出到一个文本文件中，评测系统再把标准的输出文件和你提交的程序运行的结果的输出文件进行对<br>比，从而判断你提交的程序的正确与否。既然是这样，要判断提交的程序的正确性就依赖于系统的测试数据，这时就不可能<br>只是用一组测试数据来判断程序的正确性，需要有很多组测试数据，而国际ACM比赛标准的评测系统是PC2，它只支持一个题<br>目一个输入数据文件、一个输出数据文件。所以这时候就得把多组测试数据放在一个文件里，提交的程序必须把这个文件里<br>的多组输入数据都得出结果。<br>现在我们了解了评测系统是把测试数据放在文件中的，既然这样我们就可以通过判断是否已经到了文件尾部来判断有多少组<br>数据，判断文件尾的方法如下：</p>
<p>C++<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b)<span class="comment">//C++把cin语句放在while循环中。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>C<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="comment">//一共有三种方式</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a, &amp;b) != EOF)<span class="comment">//EOF的值为-1，而scanf当没有输入的时候会返回 - 1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a, &amp;b) == <span class="number">2</span>)<span class="comment">//有几个输入，那么scanf就返回几，所以说这样写也可以</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*对scanf的返回值取按位反，-1按位取反会变为0，只要返回值不为-1，就一直读下去，如果到了-1，则说明到了文件</span></span><br><span class="line"><span class="comment">    尾了。*/</span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a, &amp;b))</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>有没有发现，<strong>对于多组输入的a和b，是边输入边输出，而不是将这些数存到某数组里面，在输入结束时，再对其进行分别<br>输出。</strong> 如果你还是小白，千万不要忽视这一点，兴许你现在还没不以为然，但一定要有这个思维。</p>
<h4 id="4-多组数据的输入输出，以某种标志结束输入"><a href="#4-多组数据的输入输出，以某种标志结束输入" class="headerlink" title="4. 多组数据的输入输出，以某种标志结束输入"></a>4. 多组数据的输入输出，以某种标志结束输入</h4><p>题目要求输入多组整数a和b，然后对于每组的输入，分别输出对应a和b的和，当a, b同时为0时结束</p>
<p>C++<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>C</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a, &amp;b) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
  </entry>
  <entry>
    <title>POJ 3278</title>
    <url>/2019/04/28/POJ%203278/</url>
    <content><![CDATA[<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, step;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(node m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(m.x &lt; <span class="number">0</span> || m.x &gt; <span class="number">100000</span> || vis[m.x])</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(node start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;node&gt; q;</span><br><span class="line">	q.push(start);</span><br><span class="line">	node cur;</span><br><span class="line">	node next;</span><br><span class="line">	<span class="keyword">while</span>(q.size())</span><br><span class="line">	&#123;</span><br><span class="line">		cur = q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			next.x = cur.x + dir[i];</span><br><span class="line">			next.step = cur.step + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(check(next))</span><br><span class="line">			&#123;</span><br><span class="line">				q.push(next);</span><br><span class="line">				vis[next.x] = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">if</span>(next.x == k)</span><br><span class="line">					<span class="keyword">return</span> next.step;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		next.x = cur.x * <span class="number">2</span>;</span><br><span class="line">		next.step = cur.step + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(check(next))</span><br><span class="line">		&#123;</span><br><span class="line">			q.push(next);</span><br><span class="line">			vis[next.x] = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span>(next.x == k)</span><br><span class="line">				<span class="keyword">return</span> next.step;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">		node m;</span><br><span class="line">		m.x = n;</span><br><span class="line">		m.step = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(n &gt;= k)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; n - k &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; bfs(m) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
  </entry>
</search>
