<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>二叉树的遍历</title>
    <url>/2019/11/18/tree/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Project: single linkeed list (数据结构 单链表)</span></span><br><span class="line"><span class="comment">	InitList(LinkList &amp;L) 参数：单链表L 功能：初始化 时间复杂度 O(1)</span></span><br><span class="line"><span class="comment">	ListLength(LinkList L) 参数：单链表L 功能：获得单链表长度 时间复杂度O(n)</span></span><br><span class="line"><span class="comment">	ListInsert(LinkList &amp;L,int i,ElemType e) 参数：单链表L,位置i，元素e 功能：位置i后插 时间复杂度O(n)[加入了查找]</span></span><br><span class="line"><span class="comment">	                                        若已知指针p指向的后插 O(1)</span></span><br><span class="line"><span class="comment">	ListDelete(LinkList &amp;L,int i) 参数：单链表L，位置i 功能：删除位置i元素 时间复杂度O(n)[加入了查找]</span></span><br><span class="line"><span class="comment">	                              若已知p指针指向的删除 最好是O(1),因为可以与后继结点交换数据域，然后删除后继结点。</span></span><br><span class="line"><span class="comment">								  最坏是O(n),即从头查找p之前的结点,然后删除p所指结点</span></span><br><span class="line"><span class="comment">	LocateElem(LinkList L,ElemType e) 参数：单链表L，元素e 功能：查找第一个等于e的元素，返回指针 时间复杂度O(n)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Project: 二叉树(BiTree)</span></span><br><span class="line"><span class="comment">InitTree(BiTree &amp;T) 参数T，二叉树根节点 作用：初始化二叉树，先序递归创建</span></span><br><span class="line"><span class="comment">PreOrder(BiTree T)  参数T，二叉树根节点 作用：先序遍历二叉树，递归方式</span></span><br><span class="line"><span class="comment">InOrder(BiTree T)   参数T，二叉树根节点 作用：中序遍历二叉树，递归方式</span></span><br><span class="line"><span class="comment">PostOrder(BiTree T) 参数T，二叉树根节点 作用：后序遍历二叉树，递归方式</span></span><br><span class="line"><span class="comment">LevelOrder(BiTree T)参数T，二叉树根节点 作用：层序遍历二叉树，递归方式</span></span><br><span class="line"><span class="comment">CreateBiTree(BiTree &amp;T) 参数T，二叉树根节点 作用：调用InitTree，创建二叉树</span></span><br><span class="line"><span class="comment">Traverse(BiTree T)      参数T，二叉树根节点 作用：PreOrder InOrder PostOrder LevelOrder遍历二叉树</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TElemType int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//链式二叉树数据结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span><span class="comment">//左右孩子</span></span><br><span class="line">&#125;BiTNode, *BiTree;</span><br><span class="line"><span class="comment">//********************************基本操作函数********************************//</span></span><br><span class="line"><span class="comment">//创建二叉树 规定数据域为-1，则为空 先序创建</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TElemType a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == a) T = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">        T-&gt;data = a;</span><br><span class="line">        InitTree(T-&gt;lchild);</span><br><span class="line">        InitTree(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先序遍历-递归</span></span><br><span class="line"><span class="comment">//先序遍历 按照逻辑来说,执行这个函数前,应该进行逻辑判断（树是否为空），放在里面的话也没有else进行输出提示，不太好</span></span><br><span class="line"><span class="comment">//这里就按照课本敲代码了，在对应功能实现函数进行逻辑判断</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, T-&gt;data);</span><br><span class="line">        PreOrder(T-&gt;lchild);<span class="comment">//递归先序遍历左右子树</span></span><br><span class="line">        PreOrder(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历-递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        InOrder(T-&gt;lchild);<span class="comment">//递归中序遍历左右子树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, T-&gt;data);</span><br><span class="line">        InOrder(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历-递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PostOrder(T-&gt;lchild);<span class="comment">//递归后序遍历左右子树</span></span><br><span class="line">        PostOrder(T-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, T-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;BiTNode&gt; q;<span class="comment">//借助队列</span></span><br><span class="line">    <span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        BiTNode temp;<span class="comment">//暂存要出队的结点</span></span><br><span class="line">        q.push(*T);<span class="comment">//根结点入队</span></span><br><span class="line">        <span class="keyword">while</span> (!q.empty())<span class="comment">//队列非空</span></span><br><span class="line">        &#123;</span><br><span class="line">            temp = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp.data);</span><br><span class="line">            <span class="keyword">if</span> (temp.lchild != <span class="literal">NULL</span>) q.push(*temp.lchild);<span class="comment">//队列先进先出，先入左孩子</span></span><br><span class="line">            <span class="keyword">if</span> (temp.rchild != <span class="literal">NULL</span>) q.push(*temp.rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//**********************************功能实现函数*****************************//</span></span><br><span class="line"><span class="comment">//调用InitTree</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请按照先序遍历输入二叉树(-1无):"</span>);</span><br><span class="line">    InitTree(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"二叉树先序遍历序列:"</span>);</span><br><span class="line">    PreOrder(T);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历功能函数 调用PreOrder InOrder PostOrder LevelOrder</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choice;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"********1.先序遍历    2.中序遍历*********\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"********3.后序遍历    4.层次遍历*********\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"********5.返回上一单元\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入菜单序号：\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">5</span> == choice) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;<span class="built_in">printf</span>(<span class="string">"二叉树先序遍历序列:"</span>);PreOrder(T);<span class="built_in">printf</span>(<span class="string">"\n"</span>);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;<span class="built_in">printf</span>(<span class="string">"二叉树中序遍历序列:"</span>);InOrder(T);<span class="built_in">printf</span>(<span class="string">"\n"</span>);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123;<span class="built_in">printf</span>(<span class="string">"二叉树后序遍历序列:"</span>);PostOrder(T);<span class="built_in">printf</span>(<span class="string">"\n"</span>);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: &#123;<span class="built_in">printf</span>(<span class="string">"二叉树层次遍历序列:"</span>);LevelOrder(T);<span class="built_in">printf</span>(<span class="string">"\n"</span>);&#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">"输入错误！！！\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"********1.创建    2.遍历*********\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"********3.退出\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree T = <span class="literal">NULL</span>;<span class="keyword">int</span> choice = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入菜单序号：\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;choice);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">3</span> == choice) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:CreateBiTree(T);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:Traverse(T);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">"输入错误！！！\n"</span>);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之单链表的实现</title>
    <url>/2019/11/18/LinkedList/</url>
    <content><![CDATA[<h4 id="单链表的实现"><a href="#单链表的实现" class="headerlink" title="单链表的实现"></a>单链表的实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Status int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType int</span></span><br><span class="line"><span class="comment">//单链表结点数据结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"><span class="comment">//**************************基本操作函数***************************//</span></span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line"><span class="function">Status <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L = <span class="keyword">new</span> LNode;<span class="comment">//生成头结点 这样删除等操作就不必分第一个结点和其他了</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取单链表长度 头结点无数据，不算</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p=L;<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum<span class="number">-1</span>;<span class="comment">//去除头结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入函数--后插法 插入到第i(1&lt;=i&lt;=length+1)个位置 即i-1之后 不必区分i的位置</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LNode* s;LinkList p=L;<span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;(j&lt;i<span class="number">-1</span>))<span class="comment">//j指到i-1位置或者p已经到最后时跳出</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p||j&gt;i<span class="number">-1</span>)<span class="comment">//i&lt;1或者i&gt;ListLength(L)+1时,插入位置无效 不调用ListLength,提高效率</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入位置无效！！！\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s=<span class="keyword">new</span> LNode;</span><br><span class="line">    s-&gt;data=e;</span><br><span class="line">    s-&gt;next=p-&gt;next;</span><br><span class="line">    p-&gt;next=s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除函数 删除位置i的结点 即删除i-1之后的结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LNode* s;LinkList p=L;<span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    LinkList q;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;(j&lt;i<span class="number">-1</span>))<span class="comment">//j指到i-1位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!(p-&gt;next)||j&gt;i<span class="number">-1</span>)<span class="comment">//i&lt;1或者i&gt;ListLength(L)时,删除位置无效</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除位置无效！！！\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q=p-&gt;next;</span><br><span class="line">    p-&gt;next=q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);<span class="comment">//释放空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找函数 按值查找 查找第一个等于e的结点 成功返回该结点指针，否则返回NULL</span></span><br><span class="line"><span class="function">LNode *<span class="title">LocateElem</span><span class="params">(LinkList L,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LNode *p=L;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;(p-&gt;data!=e))</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//**************************功能实现函数**************************//</span></span><br><span class="line"><span class="comment">//遍历输出函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p=L-&gt;next;<span class="comment">//跳过头结点</span></span><br><span class="line">    <span class="keyword">if</span>(ListLength(L))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"当前单链表所有元素:"</span>);</span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"当前单链表已空！\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入功能函数 调用ListInsert后插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(LinkList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> place;ElemType e;<span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要插入的位置(从1开始)及元素:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;place,&amp;e);</span><br><span class="line">    flag=ListInsert(L,place,e);</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入成功！！！\n"</span>);</span><br><span class="line">        PrintList(L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除功能函数 调用ListDelete删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> place;<span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要删除的位置(从1开始):\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;place);</span><br><span class="line">    flag=ListDelete(L,place);</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"删除成功！！！\n"</span>);</span><br><span class="line">        PrintList(L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找功能函数 调用LocateElem查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Search</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElemType e;LNode *q;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要查找的值:\n"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;e);</span><br><span class="line">    q=LocateElem(L,e);</span><br><span class="line">    <span class="keyword">if</span>(q)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"找到该元素！\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"未找到该元素！\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"********1.后插    2.删除*********\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"********3.查找    4.输出*********\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"********5.退出          *********\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList L;<span class="keyword">int</span> choice;</span><br><span class="line">    InitList(L);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入菜单序号：\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;choice);</span><br><span class="line">        <span class="keyword">if</span>(choice==<span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">switch</span>(choice)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:Insert(L);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:Delete(L);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:Search(L);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:PrintList(L);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">"输入错误！！！\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>单链表</tag>
      </tags>
  </entry>
</search>
